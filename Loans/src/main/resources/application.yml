server:
  port: 8092

spring:
  application:
    name: "loans"
  datasource:
    url: jdbc:h2:mem:loansDB
    username: sa
    password: ""
    driver-class-name: org.h2.Driver
  h2:
    console:
      enabled: true
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true
  config:
    import: "optional:configserver:http://localhost:8071/"
#  rabbitmq:
#    host: localhost
#    port: 5672
#    username: guest
#    password: guest

management:
  endpoints:
    web:
      exposure:
        include: "*"
  endpoint:
    shutdown:
      access: unrestricted
    health:
      probes:
        enabled: true
  health:
    livenessstate:
      enabled: true
    readinessstate:
      enabled: true
  info:
    env:
      enabled: true
  metrics:
    tags:
      application: "${spring.application.name}"

eureka:
  client:
    fetch-registry: true
    register-with-eureka: true
    service-url:
      defaultZone: http://localhost:8070/eureka/

info:
  app:
    name: "loans"
    description: "Loans Management Service"
    version: "1.0.0"

logging:
  level:
    com:
      project:
        loans: DEBUG
  pattern:
    level: "%5p [${spring.application.name}, %X{trace_id}, %X{span_id}]"

resilience4j:
  retry:
    configs:
      default:
        max-attempts: 3
        wait-duration: 500
        enable-exponential-backoff: true
        exponential-backoff-multiplier: 2
        ignore-exceptions:
          - java.lang.NullPointerException
        retry-exceptions: # when defining this ensures retry will occur with the exceptions listed only
          # and all other exceptions will be ignored so no need to define ignored exceptions
          - java.util.concurrent.TimeoutException
  ratelimiter:
    configs:
      default:
        limit-for-period: 1 # the maximum number of requests allowed in the refresh interval
        limit-refresh-period: 5000 # the amount of time to refresh the tokens
        timeout-duration: 1000 # the amount of time that the thread will wait before returning error
