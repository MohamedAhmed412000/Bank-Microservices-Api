services:
  redis:
    image: redis
    container_name: redis-cache
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping | grep PONG"]
      timeout: 10s
      retries: 10
    extends:
      file: common-services.yml
      service: network-deploy-service

  config-server:
    image: "mohamedahmed412000/config-server:v5.0"
    container_name: configserver-ms
    ports:
      - "8071:8071"
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:8071/actuator/health/readiness"]
      #      start the test after 10 seconds and if failed then retry 10 times with interval of 10 seconds
      #      between tests with maximum timeout for every test as 5 seconds
      start_period: 10s
      retries: 10
      interval: 10s
      timeout: 5s
    restart: unless-stopped
    #    depends_on:
    #      rabbitmq:
    #        condition: service_healthy
    extends:
      file: common-services.yml
      service: microservice-base
    environment:
      OTEL_SERVICE_NAME: "configserver"

  eureka-server:
    image: "mohamedahmed412000/eureka-server:v2.0"
    container_name: eurekaserver-ms
    ports:
      - "8070:8070"
    healthcheck:
      test: [ "CMD", "wget", "--spider", "-q", "http://localhost:8070/actuator/health/readiness" ]
      start_period: 10s
      retries: 10
      interval: 10s
      timeout: 5s
    restart: unless-stopped
    depends_on:
      config-server:
        condition: service_healthy
    extends:
      file: common-services.yml
      service: configserver-deploy-base
    environment:
      SPRING_APPLICATION_NAME: "eurekaserver"
      OTEL_SERVICE_NAME: "eurekaserver"

  accounts:
    image: "mohamedahmed412000/accounts:v9.0"
    container_name: accounts-ms
    #    ports:
    #      - "8091:8091"
    healthcheck:
      test: [ "CMD", "wget", "--spider", "-q", "http://localhost:8091/actuator/health/readiness" ]
      start_period: 10s
      retries: 10
      interval: 10s
      timeout: 5s
    depends_on:
      config-server:
        condition: service_healthy
      eureka-server:
        condition: service_healthy
      kafka:
        condition: service_started
    extends:
      file: common-services.yml
      service: eurekaserver-deploy-base
    environment:
      SPRING_APPLICATION_NAME: "accounts"
      OTEL_SERVICE_NAME: "accounts"

  loans:
    image: "mohamedahmed412000/loans:v7.0"
    container_name: loans-ms
    #    ports:
    #      - "8092:8092"
    healthcheck:
      test: [ "CMD", "wget", "--spider", "-q", "http://localhost:8092/actuator/health/readiness" ]
      start_period: 10s
      retries: 10
      interval: 10s
      timeout: 5s
    depends_on:
      config-server:
        condition: service_healthy
      eureka-server:
        condition: service_healthy
    extends:
      file: common-services.yml
      service: eurekaserver-deploy-base
    environment:
      SPRING_APPLICATION_NAME: "loans"
      OTEL_SERVICE_NAME: "loans"

  cards:
    image: "mohamedahmed412000/cards:v7.0"
    container_name: cards-ms
    #    ports:
    #      - "8093:8093"
    healthcheck:
      test: [ "CMD", "wget", "--spider", "-q", "http://localhost:8093/actuator/health/readiness" ]
      start_period: 10s
      retries: 10
      interval: 10s
      timeout: 5s
    depends_on:
      config-server:
        condition: service_healthy
      eureka-server:
        condition: service_healthy
    extends:
      file: common-services.yml
      service: eurekaserver-deploy-base
    environment:
      SPRING_APPLICATION_NAME: "cards"
      OTEL_SERVICE_NAME: "cards"

  notifications:
    image: "mohamedahmed412000/notifications:v2.0"
    container_name: notifications-ms
    depends_on:
      kafka:
        condition: service_started
    extends:
      file: common-services.yml
      service: microservice-base
    environment:
      SPRING_APPLICATION_NAME: "notifications"
      OTEL_SERVICE_NAME: "notifications"

  keycloak:
    image: quay.io/keycloak/keycloak:latest
    container_name: keycloak
    ports:
      - "8000:8080"
    environment:
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
    command: "start-dev"
    extends:
      file: common-services.yml
      service: network-deploy-service

  api-gateway:
    image: "mohamedahmed412000/api-gateway:v4.0"
    container_name: apigateway-ms
    ports:
      - "8080:8080"
    depends_on:
      accounts:
        condition: service_healthy
      cards:
        condition: service_healthy
      loans:
        condition: service_healthy
      redis:
        condition: service_healthy
    extends:
      file: common-services.yml
      service: eurekaserver-deploy-base
    environment:
      SPRING_APPLICATION_NAME: "apigateway"
      SPRING_DATA_REDIS_HOST: redis
      SPRING_DATA_REDIS_PORT: 6379
      SPRING_DATA_REDIS_CONNECT-TIMEOUT: 2s
      SPRING_DATA_REDIS_TIMEOUT: 1s
      OTEL_SERVICE_NAME: "apigateway"
      SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_JWK-SET-URI: "http://keycloak:8080/realms/master/protocol/openid-connect/certs"

#  rabbitmq:
#    image: "rabbitmq:4.0-management"
#    container_name: rabbitmq
#    hostname: rabbitmq
#    ports:
#      - "5672:5672"
#      - "15672:15672"
#    healthcheck:
#      test: ["CMD", "rabbitmq-diagnostics", "check_port_connectivity"]
#      interval: 10s
#      timeout: 5s
#      retries: 10
#      start_period: 5s
#    restart: unless-stopped
#    extends:
#      file: common-services.yml
#      service: network-deploy-service

  kafka:
    image: docker.io/bitnami/kafka:3.9
    ports:
      - "9092:9092"
    volumes:
      - "kafka_data:/bitnami"
    environment:
      # KRaft settings
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093
      # Listeners
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://:9092
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT
    extends:
      file: common-services.yml
      service: network-deploy-service

volumes:
  kafka_data:
    driver: local

networks:
  nextgen-bank:
    driver: bridge
