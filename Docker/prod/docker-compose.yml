services:
  redis:
    image: redis
    container_name: redis-cache
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping | grep PONG"]
      timeout: 10s
      retries: 10
    extends:
      file: common-services.yml
      service: network-deploy-service

  config-server:
    image: "mohamedahmed412000/config-server:v5.0"
    container_name: configserver-ms
    ports:
      - "8071:8071"
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:8071/actuator/health/readiness"]
      #      start the test after 10 seconds and if failed then retry 10 times with interval of 10 seconds
      #      between tests with maximum timeout for every test as 5 seconds
      start_period: 10s
      retries: 10
      interval: 10s
      timeout: 5s
    restart: unless-stopped
    #    depends_on:
    #      rabbitmq:
    #        condition: service_healthy
    extends:
      file: common-services.yml
      service: microservice-base
    environment:
      OTEL_SERVICE_NAME: "configserver"

  eureka-server:
    image: "mohamedahmed412000/eureka-server:v2.0"
    container_name: eurekaserver-ms
    ports:
      - "8070:8070"
    healthcheck:
      test: [ "CMD", "wget", "--spider", "-q", "http://localhost:8070/actuator/health/readiness" ]
      start_period: 10s
      retries: 10
      interval: 10s
      timeout: 5s
    restart: unless-stopped
    depends_on:
      config-server:
        condition: service_healthy
    extends:
      file: common-services.yml
      service: configserver-deploy-base
    environment:
      SPRING_APPLICATION_NAME: "eurekaserver"
      OTEL_SERVICE_NAME: "eurekaserver"

  accounts:
    image: "mohamedahmed412000/accounts:v7.0"
    container_name: accounts-ms
    ports:
      - "8091:8091"
    healthcheck:
      test: [ "CMD", "wget", "--spider", "-q", "http://localhost:8091/actuator/health/readiness" ]
      start_period: 10s
      retries: 10
      interval: 10s
      timeout: 5s
    depends_on:
      config-server:
        condition: service_healthy
      eureka-server:
        condition: service_healthy
    extends:
      file: common-services.yml
      service: eurekaserver-deploy-base
    environment:
      SPRING_APPLICATION_NAME: "accounts"
      OTEL_SERVICE_NAME: "accounts"

  loans:
    image: "mohamedahmed412000/loans:v7.0"
    container_name: loans-ms
    ports:
      - "8092:8092"
    healthcheck:
      test: [ "CMD", "wget", "--spider", "-q", "http://localhost:8092/actuator/health/readiness" ]
      start_period: 10s
      retries: 10
      interval: 10s
      timeout: 5s
    depends_on:
      config-server:
        condition: service_healthy
      eureka-server:
        condition: service_healthy
    extends:
      file: common-services.yml
      service: eurekaserver-deploy-base
    environment:
      SPRING_APPLICATION_NAME: "loans"
      OTEL_SERVICE_NAME: "loans"

  cards:
    image: "mohamedahmed412000/cards:v7.0"
    container_name: cards-ms
    ports:
      - "8093:8093"
    healthcheck:
      test: [ "CMD", "wget", "--spider", "-q", "http://localhost:8093/actuator/health/readiness" ]
      start_period: 10s
      retries: 10
      interval: 10s
      timeout: 5s
    depends_on:
      config-server:
        condition: service_healthy
      eureka-server:
        condition: service_healthy
    extends:
      file: common-services.yml
      service: eurekaserver-deploy-base
    environment:
      SPRING_APPLICATION_NAME: "cards"
      OTEL_SERVICE_NAME: "cards"

  api-gateway:
    image: "mohamedahmed412000/api-gateway:v3.0"
    container_name: apigateway-ms
    ports:
      - "8080:8080"
    depends_on:
      accounts:
        condition: service_healthy
      cards:
        condition: service_healthy
      loans:
        condition: service_healthy
      redis:
        condition: service_healthy
    extends:
      file: common-services.yml
      service: eurekaserver-deploy-base
    environment:
      SPRING_APPLICATION_NAME: "apigateway"
      SPRING_DATA_REDIS_HOST: redis
      SPRING_DATA_REDIS_PORT: 6379
      SPRING_DATA_REDIS_CONNECT-TIMEOUT: 2s
      SPRING_DATA_REDIS_TIMEOUT: 1s
      OTEL_SERVICE_NAME: "apigateway"

  # GRAFANA Services
  read:
    image: grafana/loki:latest
    command: "-config.file=/etc/loki/config.yaml -target=read"
    ports:
      - 3101:3100
      - 7946
      - 9095
    volumes:
      - ../observability/grafana/loki/loki-config.yaml:/etc/loki/config.yaml
    depends_on:
      - minio
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3100/ready || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks: &loki-dns
      nextgen-bank:
        aliases:
          - loki

  write:
    image: grafana/loki:latest
    command: "-config.file=/etc/loki/config.yaml -target=write"
    ports:
      - 3102:3100
      - 7946
      - 9095
    volumes:
      - ../observability/grafana/loki/loki-config.yaml:/etc/loki/config.yaml
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3100/ready || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
    depends_on:
      - minio
    networks:
      <<: *loki-dns

  alloy:
    image: grafana/alloy:latest
    volumes:
      - ../observability/grafana/alloy/alloy-local-config.yaml:/etc/alloy/config.alloy:ro
      - /var/run/docker.sock:/var/run/docker.sock
    command: run --server.http.listen-addr=0.0.0.0:12345 --storage.path=/var/lib/alloy/data /etc/alloy/config.alloy
    ports:
      - 12345:12345
    depends_on:
      - gateway
    extends:
      file: common-services.yml
      service: network-deploy-service

  minio:
    image: minio/minio
    entrypoint:
      - sh
      - -euc
      - |
        mkdir -p /data/loki-data && \
        mkdir -p /data/loki-ruler && \
        minio server /data
    environment:
      - MINIO_ROOT_USER=loki
      - MINIO_ROOT_PASSWORD=supersecret
      - MINIO_PROMETHEUS_AUTH_TYPE=public
      - MINIO_UPDATE=off
    ports:
      - 9000
    volumes:
      - ./.data/minio:/data
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9000/minio/health/live" ]
      interval: 15s
      timeout: 20s
      retries: 5
    extends:
      file: common-services.yml
      service: network-deploy-service

  grafana:
    image: grafana/grafana:latest
    environment:
      - GF_PATHS_PROVISIONING=/etc/grafana/provisioning
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
    depends_on:
      - gateway
    entrypoint:
      - sh
      - -euc
      - |        
        /run.sh
    ports:
      - "3000:3000"
    volumes:
      - "../observability/grafana/datasources.yml:/etc/grafana/provisioning/datasources/datasources.yml"
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3000/api/health || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
    extends:
      file: common-services.yml
      service: network-deploy-service

  tempo:
    image: grafana/tempo:latest
    container_name: tempo
    command: -config.file /etc/tempo-config.yml
    ports:
      - "3110:3100"
      - "4318:4318"
    volumes:
      - "../observability/grafana/tempo/tempo.yml:/etc/tempo-config.yml"
    extends:
      file: common-services.yml
      service: network-deploy-service

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - "../observability/grafana/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml"
    extends:
      file: common-services.yml
      service: network-deploy-service

  backend:
    image: grafana/loki:latest
    volumes:
      - "../observability/grafana/loki/loki-config.yaml:/etc/loki/config.yaml"
    ports:
      - "3100"
      - "7946"
    command: "-config.file=/etc/loki/config.yaml -target=backend -legacy-read-mode=false"
    depends_on:
      - gateway
    extends:
      file: common-services.yml
      service: network-deploy-service

  gateway:
    image: nginx:latest
    depends_on:
      - read
      - write
    entrypoint:
      - sh
      - -euc
      - |
        cat <<EOF > /etc/nginx/nginx.conf
        user  nginx;
        worker_processes  5;  ## Default: 1

        events {
          worker_connections   1000;
        }

        http {
          resolver 127.0.0.11;

          server {
            listen             3100;

            location = / {
              return 200 'OK';
              auth_basic off;
            }

            location = /api/prom/push {
              proxy_pass       http://write:3100\$$request_uri;
            }

            location = /api/prom/tail {
              proxy_pass       http://read:3100\$$request_uri;
              proxy_set_header Upgrade \$$http_upgrade;
              proxy_set_header Connection "upgrade";
            }

            location ~ /api/prom/.* {
              proxy_pass       http://read:3100\$$request_uri;
            }

            location = /loki/api/v1/push {
              proxy_pass       http://write:3100\$$request_uri;
            }

            location = /loki/api/v1/tail {
              proxy_pass       http://read:3100\$$request_uri;
              proxy_set_header Upgrade \$$http_upgrade;
              proxy_set_header Connection "upgrade";
            }

            location ~ /loki/api/.* {
              proxy_pass       http://read:3100\$$request_uri;
            }
          }
        }
        EOF
        /docker-entrypoint.sh nginx -g "daemon off;"
    ports:
      - "3100:3100"
    healthcheck:
      test: [ "CMD", "service", "nginx", "status" ]
      interval: 10s
      timeout: 5s
      retries: 5
    extends:
      file: common-services.yml
      service: network-deploy-service

#  rabbitmq:
#    image: "rabbitmq:4.0-management"
#    container_name: rabbitmq
#    hostname: rabbitmq
#    ports:
#      - "5672:5672"
#      - "15672:15672"
#    healthcheck:
#      test: ["CMD", "rabbitmq-diagnostics", "check_port_connectivity"]
#      interval: 10s
#      timeout: 5s
#      retries: 10
#      start_period: 5s
#    restart: unless-stopped
#    extends:
#      file: common-services.yml
#      service: network-deploy-service

networks:
  nextgen-bank:
    driver: bridge
